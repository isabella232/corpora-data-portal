openapi: 3.0.0
info:
  version: "1.0.0"
  title: Chan Zuckerburg Initiative cellxgene Data Portal API
  description: >-
    This API is under development, and subject frequent breaking changes without notice. Users are encouraged to use the
    https://cellxgene.cziscience.com to access the cellxgene Data Portal.
servers:
  - description: Production environment
    url: https://api.corpora.cziscience.com
  - description: Development environment
    url: https://api.dev.corpora.cziscience.com
  - description: Staging environment
    url: https://api.staging.corpora.cziscience.com
paths:
  /dp/v1/submission:
    get:
      summary: List open submissions in Corpora
      tags:
        - submissions
      description: >-
        Lists all submissions by their UUIDs that currently exist in Corpora. If a parameter is specified as a filter,
        then only submissions that meet the given criteria will be outputted.
      operationId: corpora.lambdas.api.v1.submission.get_submissions_list
      parameters:
        - $ref: "#/components/parameters/query_user_uuid"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  submissions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: "#/components/schemas/collection_uuid"
                        name:
                          type: string
                        owner_id:
                          type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

    post:
      summary: Create a new collection submission
      tags:
        - submissions
      description: >-
        Opens a new submission. If a collection UUID is not provided, then a collection UUID will be generated and a blank
        submission will be created. If a collection UUID is provided, a submission is opened to modify the existing
        collection. At most, one submission can be open for a collection. The collection UUID will be used to pre-populate the
        newly created submission. On success, a message will be returned with the collection UUID.
      operationId: corpora.lambdas.api.v1.submission.create_new_submission
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                collection_uuid:
                  type: string
                  description: >-
                    If the submission is created in order to update an existing publicly published collection, then a
                    Collection UUID must be provided in order to backfill the new submission entity with the existing
                    collection details for modification.
      responses:
        "201":
          description: A new submissions has been created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_uuid:
                    $ref: "#/components/schemas/collection_uuid"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/submission/{collection_uuid}:
    get:
      summary: Get a collection's submission details by UUID
      tags:
        - submissions
      description: >-
        Returns all available metadata information about a collection submission, including URIs of datasets that are
        attached to the collection.
      operationId: corpora.lambdas.api.v1.submission.get_submission_details
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      responses:
        "200":
          description: Return the submission metadata.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

    delete:
      summary: Delete a submission
      tags:
        - submissions
      description: >-
        Deletes the submission associated with the given collection UUID. This does not delete the collection if the collection
        associated with the submission has been previously publicly published.
      operationId: corpora.lambdas.api.v1.submission.delete_submission
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/submission/{collection_uuid}/file:
    put:
      summary: Add a file to a submission
      tags:
        - submissions
      description: >-
        TODO: https://github.com/chanzuckerberg/corpora-data-portal/issues/361
        Adds a dataset file to the collection’s S3 bucket. A quick validation will be performed to ensure that if the file is a data file, then the
        extension is one of the accepted types (i.e. .loom, .h5ad, or .rds). If a file already exists with the same
        name, it will replace it and increment the revision value of the dataset.
      operationId: corpora.lambdas.api.v1.submission.add_file_to_submission
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filename:
                  description: >-
                    The name of the file that is being uploaded. A duplicate filename, will result in the overwrite of
                    the existing file.
                  type: string
                filetype:
                  type: string
                  enum: [legal, data]
                  description: >-
                    The filetype will be one of {legal or data} which provides information on how to handle the file. If
                    legal, then an update is made to the Submission entity signifying that the T&C form has been
                    submitted.
                body:
                  type: string
                  format: binary
                  description: The contents of the file to be added to the submission.
              required:
                - filename
      responses:
        "201":
          description: File was successfully added to submission.
          content:
            application/json:
              schema:
                type: object
                properties:
                  visibility:
                    type: string
                  s3_uri:
                    type: string
                  dataset_uuid:
                    type: string
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"

  /dp/v1/submission/{collection_uuid}/dataset/{dataset_uuid}:
    delete:
      summary: Delete a collection's dataset file
      tags:
        - submissions
      description: >-
        Deletes a file from the collection’s S3 bucket if the file exists. If no such file exists, then a warning will be
        outputted.
      operationId: corpora.lambdas.api.v1.submission.delete_dataset_from_submission
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
        - $ref: "#/components/parameters/path_dataset_uuid"
      responses:
        "202":
          description: Accepted
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/submission/{collection_uuid}/validate:
    post:
      tags:
        - submissions
      summary: Validate a collection
      description: >-
        Validates the collection to ensure that the attestation requirement is fulfilled (if appropriate) and ensures that
        there is no PII in the matrix data files uploaded and outputs the result, specifying all errors. The result of
        the validation is also stored in the backend database.
      operationId: corpora.lambdas.api.v1.submission.validate_submission
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_uuid:
                    $ref: "#/components/schemas/collection_uuid"
                  result:
                    type: string
                  message:
                    type: string
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/submission/{collection_uuid}/save:
    post:
      tags:
        - submissions
      summary: Save a collection
      description: >-
        If needed (i.e. collection level metadata was not inputted via a form and instead embedded in the matrix file),
        extracts the collection-level metadata from the datasets or uses the given collection-level metadata add via the
        body parameter and saves it to the database. The new collection metadata state will be returned in the response on
        success.
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      operationId: corpora.lambdas.api.v1.submission.save_submission
      requestBody:
        content:
          application/json:
            schema:
              description: A schema that has fields for all available collection-level metadata.
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                raw_data_link:
                  type: array
                  items:
                    type: string
                protocol_link:
                  type: array
                  items:
                    type: string
                other_information_link:
                  type: array
                  items:
                    type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_uuid:
                    $ref: "#/components/schemas/collection_uuid"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/submission/{collection_uuid}/publish:
    post:
      tags:
        - submissions
      summary: Publish a collection
      description: >-
        Publish a collection to Corpora as either public or private. The visibility of the collection will either make it
        visible on the public sites or only viewable through obfuscated URLs. If the visibility is set
        to public, the successful execution of this operation will move the Submission to a CLOSED state.

        If publishing modification to a previously published collection, this will replace the old collection with the new
        published collection. The old collection will not longer be accessible.
      operationId: corpora.lambdas.api.v1.submission.publish_submission
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      requestBody:
        content:
          application/json:
            schema:
              description: >-
                A schema that contains a field dictating the visibility of the deployments.
              type: object
              properties:
                visibility:
                  description: >-
                    Determines the visibility of the collection, that will either make the collection visible on the public
                    sites or only viewable through obfuscated URLs.
                  $ref: "#/components/schemas/visibility"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  collection_uuid:
                    $ref: "#/components/schemas/collection_uuid"
                  visibility:
                    $ref: "#/components/schemas/visibility"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/collection:
    get:
      tags:
        - collections
      summary: List published collections in Corpora
      description: >-
        This lists all collections and their UUIDs that currently exist in the corpora. If a parameter is specified as
        a filter, then only collections that meet the status criteria will be outputted.
      operationId: corpora.lambdas.api.v1.collection.get_collections_list
      parameters:
        - $ref: "#/components/parameters/query_user_uuid"
        - name: from_date
          in: query
          schema:
            type: integer
          description: The date after which collections should have been created. In seconds since epoch.
        - name: to_date
          in: query
          description: The date before which collections should have been created. In seconds since epoch.
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                required:
                  - collections
                properties:
                  collections:
                    type: array
                    items:
                      type: object
                      required:
                        - id
                        - created_at
                      properties:
                        id:
                          $ref: "#/components/schemas/collection_uuid"
                        created_at:
                          type: number
                  from_date:
                    type: integer
                  to_date:
                    type: integer
        "400":
          $ref: "#/components/responses/400"

  /dp/v1/collection/{collection_uuid}:
    get:
      tags:
        - collections
      summary: Get a collection's full details
      description: >-
        This will return all datasets and associated attributes.
      operationId: corpora.lambdas.api.v1.collection.get_collection_details
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/collection"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

    delete:
      tags:
        - collections
      summary: Delete a collection
      description: >-
        Deletes an entire collection from Corpora, including any generated artifacts/assets and deployments. If no such
        collection exists, then a warning will be outputted.
      operationId: corpora.lambdas.api.v1.collection.delete_collection
      parameters:
        - $ref: "#/components/parameters/path_collection_uuid"
      responses:
        "202":
          $ref: "#/components/responses/202"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/dataset/{dataset_uuid}/asset/{asset_uuid}:
    post:
      tags:
        - dataset
      summary: Request to download a dataset
      description: >-
        Request to download a file which on success will generate a pre-signed URL to download the dataset.
      operationId: corpora.lambdas.api.v1.dataset.post_dataset_asset
      parameters:
        - $ref: "#/components/parameters/path_dataset_uuid"
        - name: asset_uuid
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_uuid:
                    $ref: "#/components/schemas/dataset_uuid"
                  presigned_url:
                    type: string
                  file_name:
                    type: string
                  file_size:
                    type: number
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"

  /dp/v1/login:
    get:
      tags:
        - authentication
      summary: login to the system
      operationId: corpora.lambdas.api.v1.authentication.login
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/logout:
    get:
      tags:
        - authentication
      summary: logout of the system
      operationId: corpora.lambdas.api.v1.authentication.logout
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/userinfo:
    get:
      tags:
        - authentication
      summary: retrieve user information if the user is logged in
      operationId: corpora.lambdas.api.v1.authentication.userinfo
      security:
        - cxguserCookie: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userinfo"
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

  /dp/v1/oauth2/callback:
    get:
      tags:
        - authentication
      summary: callback function from auth server after login
      operationId: corpora.lambdas.api.v1.authentication.oauth2_callback
      responses:
        "200":
          $ref: "#/components/responses/200"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"

components:
  schemas:
    user_uuid:
      description: A unique identifier of a logged in User of Corpora.
      type: string
    userinfo:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/user_uuid"
        name:
          description: The user's name
          type: string
        email:
          description: The user's email
          type: string
    collection_uuid:
      description: A unique identifier of a Collection.
      type: string
    dataset_uuid:
      description: A unique identifier of a Dataset.
      type: string
    visibility:
      type: string
      enum: [PUBLIC, PRIVATE]
    collection:
      type: object
      required:
        - name
        - description
        - id
        - visibility
        - links
        - datasets
        - created_at
        - updated_at
        - data_submission_policy_version
      properties:
        created_at:
          type: number
        updated_at:
          type: number
        description:
          type: string
        name:
          type: string
        id:
          $ref: "#/components/schemas/collection_uuid"
        visibility:
          type: string
          enum: [PUBLIC, PRIVATE]
        links:
          type: array
          items:
            type: object
            required:
              - name
              - url
              - type
            properties:
              name:
                type: string
              url:
                type: string
              type:
                type: string
                enum: [PROTOCOL, RAW_DATA, DOI, LAB_WEBSITE, OTHER]
        obfuscated_uuid:
          type: string
          nullable: true
        contact_name:
          type: string
          nullable: true
        contact_email:
          type: string
          nullable: true
        data_submission_policy_version:
          type: string
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/dataset"
    ontology_element:
      type: object
      properties:
        ontology_term_id:
          type: string
        label:
          type: string
    ontology_element_array:
      type: array
      items:
        $ref: "#/components/schemas/ontology_element"
    dataset:
      type: object
      required:
        - id
        - assay
        - tissue
        - disease
        - sex
        - ethnicity
        - organism
        - development_stage
        - name
        - revision
        - dataset_deployments
        - dataset_assets
        - collection_id
        - collection_visibility
        - cell_count
      properties:
        id:
          $ref: "#/components/schemas/dataset_uuid"
        assay:
          $ref: "#/components/schemas/ontology_element_array"
        tissue:
          $ref: "#/components/schemas/ontology_element_array"
        disease:
          $ref: "#/components/schemas/ontology_element_array"
        sex:
          type: array
          items:
            type: string
        ethnicity:
          $ref: "#/components/schemas/ontology_element_array"
        organism:
          $ref: "#/components/schemas/ontology_element"
        development_stage:
          $ref: "#/components/schemas/ontology_element_array"
        name:
          type: string
        revision:
          type: integer
        dataset_deployments:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              environment:
                type: string
              url:
                type: string
        dataset_assets:
          type: array
          items:
            $ref: "#/components/schemas/dataset_asset"
        collection_id:
          $ref: "#/components/schemas/collection_uuid"
        collection_visibility:
          type: string
        cell_count:
          type: integer
          nullable: true
    dataset_asset:
      type: object
      properties:
        id:
          type: string
        dataset_id:
          type: string
        filetype:
          type: string
          enum: [H5AD, RDS, LOOM, CXG]
        filename:
          type: string
        type:
          type: string
          enum: [REMIX, ORIGINAL]
        s3_uri:
          type: string
    problem:
      type: object
      description: Error message container for HTTP APIs.
      properties:
        type:
          type: string
        title:
          type: string
        detail:
          type: string
  parameters:
    path_collection_uuid:
      name: collection_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/collection_uuid"
    path_dataset_uuid:
      name: dataset_uuid
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/dataset_uuid"
    path_filename:
      name: filename
      description: The name of a file to add, remove, or download.
      in: path
      required: true
      schema:
        type: string
    query_user_uuid:
      name: user_uuid
      description: an ID that represents the user.
      in: query
      schema:
        $ref: "#/components/schemas/user_uuid"

  responses:
    200:
      description: OK.
    201:
      description: Created.
    202:
      description: Accepted
    400:
      description: Invalid parameter.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    401:
      description: Failed to authenticate.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    403:
      description: Unauthorized.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    404:
      description: Resource not found.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
    409:
      description: File conflict.
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problem"
  securitySchemes:
    auth0:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
    cxguserCookie:
      type: apiKey
      in: cookie
      name: cxguser
      x-apikeyInfoFunc: corpora.lambdas.api.v1.authentication.apikey_info_func
